// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// DeliveryServicesNearLocation mocks base method.
func (m *MockStorage) DeliveryServicesNearLocation(ctx context.Context, latitude, longitude float64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeliveryServicesNearLocation", ctx, latitude, longitude)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeliveryServicesNearLocation indicates an expected call of DeliveryServicesNearLocation.
func (mr *MockStorageMockRecorder) DeliveryServicesNearLocation(ctx, latitude, longitude interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeliveryServicesNearLocation", reflect.TypeOf((*MockStorage)(nil).DeliveryServicesNearLocation), ctx, latitude, longitude)
}

// LoadFromFile mocks base method.
func (m *MockStorage) LoadFromFile(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadFromFile", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadFromFile indicates an expected call of LoadFromFile.
func (mr *MockStorageMockRecorder) LoadFromFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFromFile", reflect.TypeOf((*MockStorage)(nil).LoadFromFile), path)
}

// MockFileDownloader is a mock of FileDownloader interface.
type MockFileDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockFileDownloaderMockRecorder
}

// MockFileDownloaderMockRecorder is the mock recorder for MockFileDownloader.
type MockFileDownloaderMockRecorder struct {
	mock *MockFileDownloader
}

// NewMockFileDownloader creates a new mock instance.
func NewMockFileDownloader(ctrl *gomock.Controller) *MockFileDownloader {
	mock := &MockFileDownloader{ctrl: ctrl}
	mock.recorder = &MockFileDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileDownloader) EXPECT() *MockFileDownloaderMockRecorder {
	return m.recorder
}

// DownloadFile mocks base method.
func (m *MockFileDownloader) DownloadFile(fileName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", fileName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockFileDownloaderMockRecorder) DownloadFile(fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockFileDownloader)(nil).DownloadFile), fileName)
}

// RemoveFile mocks base method.
func (m *MockFileDownloader) RemoveFile(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFile", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFile indicates an expected call of RemoveFile.
func (mr *MockFileDownloaderMockRecorder) RemoveFile(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFile", reflect.TypeOf((*MockFileDownloader)(nil).RemoveFile), name)
}
